import { NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";

// Accepts JSON array OR CSV text at ?url=...
export const dynamic = "force-dynamic";
export async function POST(req: Request) {
  try {
    const { url } = await req.json();
    if (!url) return NextResponse.json({ error: "Missing url" }, { status: 400 });

    const res = await fetch(url, { cache: "no-store" });
    if (!res.ok) return NextResponse.json({ error: `Fetch failed: ${res.status}` }, { status: 502 });
    const text = await res.text();

    // Try JSON; otherwise try CSV (id,title,stage,introduced,sponsor,summary,progress)
    let rows: any[] = [];
    try {
      const parsed = JSON.parse(text);
      rows = Array.isArray(parsed) ? parsed : (parsed.items ?? []);
    } catch {
      // basic CSV parser (no quoted commas handling â€” keep your source simple)
      const [header, ...lines] = text.trim().split(/\r?\n/);
      const cols = header.split(",").map(s=>s.trim());
      rows = lines.map(line => {
        const cells = line.split(",").map(s=>s.trim());
        const obj: any = {};
        cols.forEach((c, i) => obj[c] = cells[i]);
        if (obj.progress !== undefined) obj.progress = Number(obj.progress);
        return obj;
      });
    }

    if (!Array.isArray(rows) || !rows.length) {
      return NextResponse.json({ error: "No rows found" }, { status: 400 });
    }

    // Normalize keys we care about
    const items = rows.map(r => ({
      id: String(r.id ?? r.slug ?? r.code ?? r.title?.toLowerCase().replace(/[^a-z0-9]+/g,'-') ?? crypto.randomUUID()),
      title: String(r.title ?? r.name ?? "Untitled"),
      stage: r.stage ?? r.status ?? null,
      introduced: r.introduced ?? r.date ?? null,
      sponsor: r.sponsor ?? r.minister ?? null,
      summary: r.summary ?? r.description ?? null,
      progress: typeof r.progress === "number" ? r.progress : (r.progress ? Number(r.progress) : null),
    }));

    const supa = createClient();
    const { error } = await supa.from("bills").upsert(items, { onConflict: "id" });
    if (error) return NextResponse.json({ error: error.message }, { status: 500 });

    return NextResponse.json({ ok: true, count: items.length });
  } catch (e: any) {
    return NextResponse.json({ error: e?.message ?? "ingest error" }, { status: 500 });
  }
}
