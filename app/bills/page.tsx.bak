import Link from "next/link";

/* SSR cache hint */
export const revalidate = 30;

type Bill = {
  id: string;
  title: string;
  status: string | null;
  updated_at?: string | null;
};

function env(name: string, fallback = ""): string {
  const v = process.env[name] ?? fallback;
  if (!v) console.warn(`[bills] missing env ${name}`);
  return v;
}

function sparam(v?: string | string[] | null): string | null {
  if (Array.isArray(v)) return (v[0] ?? "").trim() || null;
  if (v == null) return null;
  const s = String(v).trim();
  return s ? s : null;
}

async function getBills(opts: { q: string | null; status: string | null; page: number }) {
  const limit = 12;
  const offset = (Math.max(1, opts.page) - 1) * limit;

  const urlBase = env("NEXT_PUBLIC_SUPABASE_URL");
  const anon    = env("NEXT_PUBLIC_SUPABASE_ANON_KEY");

  const select = "id,title,status,updated_at";
  const params: string[] = [
    `select=${select}`,
    `order=updated_at.desc.nullslast`,
    `limit=${limit}`,
    `offset=${offset}`,
  ];
  if (opts.q)      params.push(`title=ilike.*${encodeURIComponent(opts.q)}*`);
  if (opts.status) params.push(`status=eq.${encodeURIComponent(opts.status)}`);

  const url = `${urlBase}/rest/v1/bills?${params.join("&")}`;

  let res: Response;
  try {
    res = await fetch(url, {
      headers: {
        apikey: anon,
        Authorization: `Bearer ${anon}`,
        Prefer: "count=exact",
      },
      next: { revalidate: 30 },
    });
  } catch (e) {
    console.error("Bills fetch failed (network):", e);
    return { items: [] as Bill[], total: 0, limit, offset };
  }

  if (!res.ok) {
    console.error("Bills fetch failed (HTTP):", res.status, await res.text().catch(() => "(no body)"));
    return { items: [] as Bill[], total: 0, limit, offset };
  }

  const items = (await res.json()) as Bill[];
  const cr = res.headers.get("content-range");
  const total = cr && cr.includes("/") ? Number(cr.split("/")[1]) : items.length;
  return { items, total, limit, offset };
}

function Toolbar({ q, status, total }: { q: string | null; status: string | null; total: number }) {
  const statuses = ["Introduced", "Second reading", "Committee", "Division", "Passed", "Rejected"];

  return (
    <form className="mb-6 flex flex-wrap items-center gap-2" action="/bills" method="get">
      <input
        name="q"
        defaultValue={q ?? ""}
        placeholder="Search bills…"
        className="w-56 rounded-lg bg-zinc-900/60 px-3 py-2 text-sm text-zinc-100 placeholder-zinc-500 outline-none ring-1 ring-zinc-800 focus:ring-emerald-500/50"
      />
      <select
        name="status"
        defaultValue={status ?? ""}
        className="rounded-lg bg-zinc-900/60 px-3 py-2 text-sm text-zinc-100 ring-1 ring-zinc-800 focus:ring-emerald-500/50"
      >
        <option value="">All statuses</option>
        {statuses.map((s) => (
          <option key={s} value={s}>{s}</option>
        ))}
      </select>
      <button
        type="submit"
        className="rounded-lg bg-emerald-600/90 px-4 py-2 text-sm font-medium text-black hover:bg-emerald-500 transition"
      >
        Apply
      </button>
      <span className="ml-auto text-xs text-zinc-400">{total} total</span>
    </form>
  );
}

function Card({ bill }: { bill: Bill }) {
  return (
    <article className="rounded-2xl border border-zinc-800 bg-zinc-950/70 p-5 shadow-[0_0_0_1px_rgba(255,255,255,0.02)_inset] hover:border-emerald-600/40 transition">
      <h3 className="text-zinc-100 text-lg font-semibold tracking-tight">{bill.title}</h3>
      <div className="mt-2 text-sm text-zinc-400">
        <span className="text-emerald-300">{bill.status ?? "—"}</span>
        {bill.updated_at && (
          <span className="ml-2 text-zinc-500">
            {new Date(bill.updated_at).toLocaleDateString()}
          </span>
        )}
      </div>
    </article>
  );
}

function Pager({ page, total }: { page: number; total: number }) {
  const perPage = 12;
  const pages = Math.max(1, Math.ceil(total / perPage));
  const prev = `/bills?page=${Math.max(1, page - 1)}`;
  const next = `/bills?page=${Math.min(pages, page + 1)}`;

  const link = (href: string, label: string, disabled = false) => (
    <Link
      href={disabled ? "#" : href}
      aria-disabled={disabled}
      className={`rounded-lg px-3 py-1.5 text-sm ring-1 transition ${
        disabled
          ? "cursor-not-allowed text-zinc-600 ring-zinc-800"
          : "text-emerald-300 ring-zinc-700 hover:ring-emerald-600/40"
      }`}
      prefetch={false}
    >
      {label}
    </Link>
  );

  return (
    <div className="mt-6 flex items-center justify-center gap-3">
      {link(prev, "Prev", page === 1)}
      <span className="text-sm text-zinc-400">Page {page} / {pages}</span>
      {link(next, "Next", page === pages)}
    </div>
  );
}

export default async function BillsPage({ searchParams }: { searchParams: Promise<Record<string, string | string[] | undefined>> }) {
  const q = sparam(sp.q as any);
  const status = sparam(sp.status as any);
  const pageStr = sparam(sp.page as any) ?? "1";
  const page = Math.max(1, Number.isFinite(Number(pageStr)) ? Number(pageStr) : 1);

  const { items, total } = await getBills({ q, status, page });

  return (
    <main className="min-h-screen bg-black">
      <div className="mx-auto max-w-6xl px-4 py-6">
        <header className="mb-6">
          <h1 className="text-2xl md:text-3xl font-semibold tracking-tight text-emerald-300">Bills</h1>
          <p className="text-zinc-400 mt-1">Live from Supabase • filtered & searchable</p>
        </header>

        <Toolbar q={q} status={status} total={total} />

        {items.length === 0 ? (
          <div className="rounded-2xl border border-zinc-800 p-8 text-center text-zinc-400">
            {(q || status) ? "No bills found." : "No bills yet or data unavailable."}
          </div>
        ) : (
          <section className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-5">
            {items.map((b) => (
              <Card key={b.id} bill={b} />
            ))}
          </section>
        )}

        <Pager page={page} total={total} />
      </div>
    </main>
  );
}
