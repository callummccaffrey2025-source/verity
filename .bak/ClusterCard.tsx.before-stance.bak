type Cluster = {
  id: string;
  title: string;
  stance: "Supportive" | "Critical" | "Neutral" | string;
  storyCount?: number;
  summary?: string;
  tags?: string[];
};
export default function ClusterCard({ cluster }: { cluster: Cluster }) {
  const stanceColor =
    cluster.stance === "Supportive" ? "bg-emerald-500" :
    cluster.stance === "Critical" ? "bg-rose-500" : "bg-zinc-500";
  return (
    <article className="card p-4">
      <div className="flex items-center justify-between gap-3">
        <span className="inline-flex items-center gap-2 text-xs text-zinc-400">
          <span className={`h-2 w-2 rounded-full ${stanceColor}`} />
          {cluster.stance}
        </span>
        <span className="text-xs text-zinc-400">{cluster.storyCount ?? 0} stories</span>
      </div>
      <h3 className="mt-2 text-base font-semibold leading-tight">{cluster.title}</h3>
      {cluster.summary && <p className="mt-1 text-sm text-zinc-400">{cluster.summary}</p>}
      {cluster.tags?.length ? (
        <div className="mt-3 flex flex-wrap gap-2">
          {cluster.tags.map(t => (
            <span key={t} className="rounded-full border border-zinc-800 px-2 py-0.5 text-xs text-zinc-400">{t}</span>
          ))}
        </div>
      ) : null}
    </article>
  );
}
